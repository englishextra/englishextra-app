/*jslint browser: true */

/*jslint node: true */

/*global ActiveXObject, addClass, addListener, ajaxGet, appendFragment,
dataSrcImgClass, debounce, doesFontExist, earlySvgSupport,
earlySvgasimgSupport, earlyHasTouch, earlyDeviceType, earlyDeviceFormfactor,
findPos, getByClass, getHumanDate, getObjectKeyValue, hasClass,
insertExternalHtml, embedHtmlFragment, isNodejs, isElectron, isNwjs,
isValidId, Kamil, LazyLoad, loadDeferred, loadJsCss, LoadingSpinner,
manageDataSrcImgAll, manageExpandingLayerAll, manageExternalLinkAll,
manageSearchInput, Masonry, needsPolyfills, openDeviceBrowser, Packery,
parseLink, progressBar, removeChildren, removeClass, require, routie,
safelyParseJson, scroll2Top, setDisplayNone, setVisible, supportsCanvas,
supportsPassive, supportsSvgSmilAnimation, throttle, toggleClass,
truncateString*/

/*property console, join, split */

(function (root, document) {
	"use strict";

	/*!
	 * safe way to handle console.log
	 * @see {@link https://github.com/paulmillr/console-polyfill}
	 */
	(function () {
		if (!root.console) {
			root.console = {};
		}
		var con = root.console;
		var prop;
		var method;
		var dummy = function () {};
		var properties = ["memory"];
		var methods = ["assert,clear,count,debug,dir,dirxml,error,exception,group,",
			"groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,",
			"show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn"
		];
		methods.join("").split(",");
		for (;(prop = properties.pop());) {
			if (!con[prop]) {
				con[prop] = {};
			}
		}
		for (;(method = methods.pop());) {
			if (!con[method]) {
				con[method] = dummy;
			}
		}
		prop = method = dummy = properties = methods = null;
	})();

	/*!
	 * supportsPassive
	 */
	root.supportsPassive = (function () {
		var support = false;
		try {
			var options = Object.defineProperty && Object.defineProperty({}, "passive", {
				get: function() {
					support = true;
				}
			});
			root.addEventListener("test", function () {}, options);
		} catch (err) {}
		return support;
	})();

	/*!
	 * supportsSvgSmilAnimation
	 */
	root.supportsSvgSmilAnimation = (function () {
		var fn = {}.toString;
		return !!document.createElementNS &&
		(/SVGAnimate/).test(fn.call(document.createElementNS("http://www.w3.org/2000/svg", "animate"))) || "";
	})();

	/*!
	 * supportsCanvas
	 */
	root.supportsCanvas = (function () {
		var canvas = document.createElement("canvas");
		return !!(canvas.getContext && canvas.getContext("2d"));
	})();

	/*!
	 * needsPolyfills
	 */
	root.needsPolyfills = (function () {
		return !String.prototype.startsWith ||
		!supportsPassive ||
		!root.requestAnimationFrame ||
		!root.matchMedia ||
		("undefined" === typeof root.Element && !("dataset" in document.documentElement)) ||
		!("classList" in document.createElement("_")) ||
		(document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) ||
		(root.attachEvent && !root.addEventListener) ||
		!("onhashchange" in root) ||
		!Array.prototype.indexOf ||
		!root.Promise ||
		!root.fetch ||
		!document.querySelectorAll ||
		!document.querySelector ||
		!Function.prototype.bind ||
		(Object.defineProperty &&
			Object.getOwnPropertyDescriptor &&
			Object.getOwnPropertyDescriptor(Element.prototype, "textContent") &&
			!Object.getOwnPropertyDescriptor(Element.prototype, "textContent").get) ||
		!("undefined" !== typeof root.localStorage && "undefined" !== typeof root.sessionStorage) ||
		!root.WeakMap ||
		!root.MutationObserver;
	})();

	/*!
	 * getHumanDate
	 */
	root.getHumanDate = (function () {
		var newDate = (new Date());
		var newDay = newDate.getDate();
		var newYear = newDate.getFullYear();
		var newMonth = newDate.getMonth();
		(newMonth += 1);
		if (10 > newDay) {
			newDay = "0" + newDay;
		}
		if (10 > newMonth) {
			newMonth = "0" + newMonth;
		}
		return "".concat(newYear, "-", newMonth, "-", newDay);
	})();

	/*!
	 * Super-simple wrapper around addEventListener and attachEvent (old IE).
	 * Does not handle differences in the Event-objects.
	 * @see {@link https://github.com/finn-no/eventlistener}
	 */
	(function () {
		var setListener = function (standard, fallback) {
			return function (el, type, listener, useCapture) {
				if (el[standard]) {
					el[standard](type, listener, useCapture);
				} else {
					if (el[fallback]) {
						el[fallback]("on" + type, listener);
					}
				}
			};
		};
		root.addListener = setListener("addEventListener", "attachEvent");
		root.removeListener = setListener("removeEventListener", "detachEvent");
	})();

	/*!
	 * get elements by class name wrapper
	 */
	root.getByClass = function (parent, name) {
		if (!document.getElementsByClassName) {
			var children = (parent || document.body).getElementsByTagName("*"),
			elements = [],
			regx = new RegExp("\\b" + name + "\\b"),
				child;
			var i,
				l;
			for (i = 0, l = children.length; i < l; i += 1) {
				child = children[i];
				if (regx.test(child.className)) {
					elements.push(child);
				}
			}
			i = l = null;
			return elements;
		} else {
			return parent ? parent.getElementsByClassName(name) : "";
		}
	};

	/*!
	 * class list wrapper
	 */
	(function () {
		var hasClass;
		var addClass;
		var removeClass;
		if ("classList" in document.documentElement) {
			hasClass = function (el, name) {
				return el.classList.contains(name);
			};
			addClass = function (el, name) {
				el.classList.add(name);
			};
			removeClass = function (el, name) {
				el.classList.remove(name);
			};
		} else {
			hasClass = function (el, name) {
				return new RegExp("\\b" + name + "\\b").test(el.className);
			};
			addClass = function (el, name) {
				if (!hasClass(el, name)) {
					el.className += " " + name;
				}
			};
			removeClass = function (el, name) {
				el.className = el.className.replace(new RegExp("\\b" + name + "\\b", "g"), "");
			};
		}
		root.hasClass = hasClass;
		root.addClass = addClass;
		root.removeClass = removeClass;
		root.toggleClass = function (el, name) {
			if (hasClass(el, name)) {
				removeClass(el, name);
			} else {
				addClass(el, name);
			}
		};
	})();

	/*!
	 * parseLink
	 */

	/*jshint bitwise: false */
	root.parseLink = function (url, full) {
		var _full = full || "";
		var _url = encodeURI(url);
		return (function () {
			var _replace = function (s) {
				return s.replace(/^(#|\?)/, "").replace(/\:$/, "");
			};
			var _location = location || "";
			var _protocol = function (protocol) {
				switch (protocol) {
				case "http:":
					return _full ? ":" + 80 : 80;
				case "https:":
					return _full ? ":" + 443 : 443;
				default:
					return _full ? ":" + _location.port : _location.port;
				}
			};
			var _isAbsolute = (0 === url.indexOf("//") || !!~url.indexOf("://"));
			var _origin = function () {
				var c = document.createElement("a");
				c.href = _url;
				var o = c.protocol + "//" + c.hostname + (c.port ? ":" + c.port : "");
				return o || "";
			};
			var _isCrossDomain = function () {
				var _locationHref = window.location || "";
				var v = _locationHref.protocol + "//" + _locationHref.hostname + (_locationHref.port ? ":" + _locationHref.port : "");
				return v !== _origin();
			};
			var _link = document.createElement("a");
			_link.href = _url;
			return {
				href: _link.href,
				origin: _origin(),
				host: _link.host || _location.host,
				port: ("0" === _link.port || "" === _link.port) ?
				_protocol(_link.protocol) :
				(_full ? _link.port : _replace(_link.port)),
				hash: _full ? _link.hash : _replace(_link.hash),
				hostname: _link.hostname || _location.hostname,
				pathname: _link.pathname.charAt(0) !== "/" ?
				(_full ? "/" + _link.pathname : _link.pathname) :
				(_full ? _link.pathname : _link.pathname.slice(1)),
				protocol: !_link.protocol ||
				":" === _link.protocol ?
				(_full ? _location.protocol : _replace(_location.protocol)) :
				(_full ? _link.protocol : _replace(_link.protocol)),
				search: _full ? _link.search : _replace(_link.search),
				query: _full ? _link.search : _replace(_link.search),
				isAbsolute: _isAbsolute,
				isRelative: !_isAbsolute,
				isCrossDomain: _isCrossDomain(),
				hasHTTP: (/^(http|https):\/\//i).test(url) ? true : false
			};
		})();
	};
	/*jshint bitwise: true */

	/*!
	 * getHttp
	 */
	root.getHttp = (function () {
		var prot = root.location.protocol || "";
		return "http:" === prot ? "http" : "https:" === prot ? "https" : "";
	})();

	/*!
	 * throttle
	 */
	root.throttle = function (func, wait) {
		var context;
		var args;
		var fn;
		var timer;
		var last = 0;
		function call() {
			timer = 0;
			last = +new Date();
			fn = func.apply(context, args);
			context = null;
			args = null;
		}
		return function throttled() {
			context = this;
			args = arguments;
			var delta = new Date() - last;
			if (!timer) {
				if (delta >= wait) {
					call();
				} else {
					timer = setTimeout(call, wait - delta);
				}
			}
			return fn;
		};
	};

	/*!
	 * debounce
	 */
	root.debounce = function (func, wait) {
		var timer;
		var args;
		var context;
		var timestamp;
		return function debounced() {
			context = this;
			args = [].slice.call(arguments, 0);
			timestamp = new Date();
			var later = function () {
				var last = (new Date()) - timestamp;
				if (last < wait) {
					timer = setTimeout(later, wait - last);
				} else {
					timer = null;
					func.apply(context, args);
				}
			};
			if (!timer) {
				timer = setTimeout(later, wait);
			}
		};
	};

	/*!
	 * isNodejs isElectron isNwjs;
	 */
	root.isNodejs = "undefined" !== typeof process && "undefined" !== typeof require || "";
	root.isElectron = (function () {
		if (typeof root !== "undefined" &&
			typeof root.process === "object" &&
			root.process.type === "renderer") {
			return true;
		}
		if (typeof root !== "undefined" &&
			typeof root.process !== "undefined" &&
			typeof root.process.versions === "object" &&
			!!root.process.versions.electron) {
			return true;
		}
		if (typeof navigator === "object" &&
			typeof navigator.userAgent === "string" &&
			navigator.userAgent.indexOf("Electron") >= 0) {
			return true;
		}
		return false;
	})();
	root.isNwjs = (function () {
		if ("undefined" !== typeof isNodejs && isNodejs) {
			try {
				if ("undefined" !== typeof require("nw.gui")) {
					return true;
				}
			} catch (err) {
				return false;
			}
		}
		return false;
	})();

	/*!
	 * openDeviceBrowser
	 */
	root.openDeviceBrowser = function (url) {
		var onElectron = function () {
			var es = isElectron ? require("electron").shell : "";
			return es ? es.openExternal(url) : "";
		};
		var onNwjs = function () {
			var ns = isNwjs ? require("nw.gui").Shell : "";
			return ns ? ns.openExternal(url) : "";
		};
		var onLocal = function () {
			return root.open(url, "_system", "scrollbars=1,location=no");
		};
		if (isElectron) {
			onElectron();
		} else if (isNwjs) {
			onNwjs();
		} else {
			if (root.getHttp) {
				return true;
			} else {
				onLocal();
			}
		}
	};

	/*!
	 * scroll2Top
	 */
	root.scroll2Top = function (scrollTargetY, speed, easing) {
		var scrollY = root.scrollY || document.documentElement.scrollTop;
		var posY = scrollTargetY || 0;
		var rate = speed || 2000;
		var soothing = easing || "easeOutSine";
		var currentTime = 0;
		var time = Math.max(0.1, Math.min(Math.abs(scrollY - posY) / rate, 0.8));
		var easingEquations = {
			easeOutSine: function (pos) {
				return Math.sin(pos * (Math.PI / 2));
			},
			easeInOutSine: function (pos) {
				return (-0.5 * (Math.cos(Math.PI * pos) - 1));
			},
			easeInOutQuint: function (pos) {
				if ((pos /= 0.5) < 1) {
					return 0.5 * Math.pow(pos, 5);
				}
				return 0.5 * (Math.pow((pos - 2), 5) + 2);
			}
		};
		function tick() {
			currentTime += 1 / 60;
			var p = currentTime / time;
			var t = easingEquations[soothing](p);
			if (p < 1) {
				requestAnimationFrame(tick);
				root.scrollTo(0, scrollY + ((posY - scrollY) * t));
			} else {
				root.scrollTo(0, posY);
			}
		}
		tick();
	};

	/*!
	 * setDisplayNone
	 */
	root.setDisplayNone = function (elem) {
		return elem && (elem.style.display = "none");
	};

	/*!
	 * setVisible
	 */
	root.setVisible = function (elem) {
		return elem && (elem.style.visibility = "visible", elem.style.opacity = 1);
	};

	/*!
	 * appendFragment
	 */
	root.appendFragment = function (car, loco) {
		if (car && loco) {
			var fragment = document.createDocumentFragment() || "";
			if ("string" === typeof car) {
				car = document.createTextNode(car);
			}
			fragment.appendChild(car);
			loco.appendChild(fragment);
		}
	};

	/*!
	 * removeElement
	 */
	root.removeElement = function (elem) {
		if (elem) {
			if ("undefined" !== typeof elem.remove) {
				return elem.remove();
			} else {
				return elem.parentNode && elem.parentNode.removeChild(elem);
			}
		}
	};

	/*!
	 * removeChildren
	 */
	root.removeChildren = function (elem) {
		if (elem && elem.firstChild) {
			for (; elem.firstChild; ) {
				elem.removeChild(elem.firstChild);
			}
		}
	};

	/*!
	 * findPos
	 */
	root.findPos = function (elem) {
		var _elem = elem.getBoundingClientRect();
		var docElem = document.documentElement || "";
		var docBody = document.body || "";
		return {
			top: Math.round(_elem.top + (root.pageYOffset || docElem.scrollTop || docBody.scrollTop) - (docElem.clientTop || docBody.clientTop || 0)),
			left: Math.round(_elem.left + (root.pageXOffset || docElem.scrollLeft || docBody.scrollLeft) - (docElem.clientLeft || docBody.clientLeft || 0))
		};
	};

	/*!
	 * safelyParseJson
	 */
	root.safelyParseJson = function (response) {
		var isObj = function (obj) {
			var objType = typeof obj;
			return ["boolean", "number", "string", 'symbol', "function"].indexOf(objType) === -1;
		};
		if (!isObj(response)) {
			return JSON.parse(response);
		} else {
			return response;
		}
	};

	/*!
	 * getObjectKeyValue
	 */
	var getObjectKeyValue = function (obj, keyName) {
		var arr = [];
		var key;
		for (key in obj) {
			if (obj.hasOwnProperty(key)) {
				if ("object" === typeof obj[key]) {
					arr = arr.concat(getObjectKeyValue(obj[key], keyName));
				} else {
					if (key === keyName) {
						arr.push(obj[key]);
					}
				}
			}
		}
		key = null;
		return arr;
	};
	root.getObjectKeyValue = getObjectKeyValue;

	/*!
	 * truncateString
	 */
	root.truncateString = function (str, max, add) {
		var _add = add || "\u2026";
		return ("string" === typeof str && str.length > max ? str.substring(0, max) + _add : str);
	};

	/*!
	 * isValidId
	 */
	root.isValidId = function (id, withHash) {
		return withHash ? /^\#[A-Za-z][-A-Za-z0-9_:.]*$/.test(id) ? true : false : /^[A-Za-z][-A-Za-z0-9_:.]*$/.test(id) ? true : false;
	};

	/*!
	 * embedHtmlFragment
	 */
	root.embedHtmlFragment = function (textHtml, render, callback, useInnerHtml) {
		var _useInnerHtml = useInnerHtml || "";
		try {
			if (_useInnerHtml) {
				render.innerHTML = textHtml;
			} else {
				if (render.parentNode) {
					var cloned = render.cloneNode(false);
					if (document.createRange) {
						var range = document.createRange();
						range.selectNode(document.body);
						var fragment = range.createContextualFragment(textHtml);
						cloned.appendChild(fragment);
						render.parentNode.replaceChild(cloned, render);
					} else {
						cloned.innerHTML = textHtml;
						render.parentNode.replaceChild(document.createDocumentFragment.appendChild(cloned), render);
					}
				}
			}
			return callback && "function" === typeof callback && callback();
		} catch (err) {
			console.log(err);
		}
	};

	/*!
	 * ajaxGet
	 * accepts external url and returns text response
	 */
	root.ajaxGet = function (url, options) {
		var _options = options || {};
		var success = _options.hasOwnProperty("success") ? _options.success : "";
		var failure = _options.hasOwnProperty("failure") ? _options.failure : "";
		var x = root.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
		if(_options.hasOwnProperty("overrideMimeType")) {
			x.overrideMimeType(_options.overrideMimeType);
		}
		x.open("GET", url, true);
		x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
		x.withCredentials = _options.hasOwnProperty("withCredentials");
		x.addEventListener("readystatechange", function () {
			if (x.status === 404 || x.status === 0) {
				return failure && "function" === typeof failure && failure(x.status);
			} else if (x.readyState === 4 && x.status === 200 && x.responseText) {
				return success && "function" === typeof success && success(x.responseText);
			}
		}, false);
		x.send(null);
	};

	/*!
	 * insertExternalHtml
	 * accepts external HTML url
	 * and renders text response as HTML into DOM element
	 */
	root.insertExternalHtml = function (renderId, url, callback, onFailure, useInnerHtml) {
		var _callback = function () {
			return callback && "function" === typeof callback && callback();
		};
		var _useInnerHtml = useInnerHtml || "";
		var render = document.getElementById(renderId.replace(/^#/, "")) || "";
		if (render) {
			ajaxGet(url, {
				overrideMimeType: "text/html;charset=utf-8",
				success: function (responseText) {
					embedHtmlFragment(responseText, render, _callback, _useInnerHtml);
				},
				failure: function (status) {
					return onFailure && "function" === typeof onFailure && onFailure(status);
				}
			});
		}
	};

	/*!
	 * manageExternalLinkAll
	 */
	root.manageExternalLinkAll = function () {
		var link = document.getElementsByTagName("a") || "";
		var arrange = function (e) {
			var handle = function (url, ev) {
				ev.stopPropagation();
				ev.preventDefault();
				var logic = function () {
					openDeviceBrowser(url);
				};
				debounce(logic, 200).call(root);
			};
			var externalLinkIsBindedClass = "external-link--is-binded";
			if (!hasClass(e, externalLinkIsBindedClass)) {
				var url = e.getAttribute("href") || "";
				if (url && parseLink(url).isCrossDomain && parseLink(url).hasHTTP) {
					e.title = "" + (parseLink(url).hostname || "") + " откроется в новой вкладке";
					if (root.getHttp) {
						e.target = "_blank";
						e.setAttribute("rel", "noopener noreferrer");
					} else {
						addListener(e, "click", handle.bind(null, url));
					}
					addClass(e, externalLinkIsBindedClass);
				}
			}
		};
		if (link) {
			var i,
			l;
			for (i = 0, l = link.length; i < l; i += 1) {
				arrange(link[i]);
			}
			i = l = null;
		}
	};

	/*!
	 * manageDataSrcImgAll
	 * @see {@link https://github.com/verlok/lazyload}
	 */
	root.dataSrcImgClass = "data-src-img";

	root.lazyLoadDataSrcImgInstance = null;
	root.manageDataSrcImgAll = function (callback) {
		var _callback = function () {
			return callback && "function" === typeof callback && callback();
		};
		var isActiveClass = "is-active";
		var dataSrcImgIsBindedClass = "data-src-img--is-binded";
		var images = getByClass(document, dataSrcImgClass) || "";
		var i = images.length;
		while (i--) {
			if (!hasClass(images[i], dataSrcImgIsBindedClass)) {
				addClass(images[i], dataSrcImgIsBindedClass);
				addClass(images[i], isActiveClass);
				addListener(images[i], "load", _callback);
			}
		}
		i = null;
		if (root.LazyLoad) {
			if (root.lazyLoadDataSrcImgInstance) {
				root.lazyLoadDataSrcImgInstance.destroy();
			}
			root.lazyLoadDataSrcImgInstance = new LazyLoad({
					elements_selector: "." + dataSrcImgClass
				});
		}
	};

	/*!
	 * manageExpandingLayerAll
	 */
	root.manageExpandingLayerAll = function (callback) {
		var btn = getByClass(document, "btn-expand-hidden-layer") || "";
		var isActiveClass = "is-active";
		var isBindedClass = "is-binded";
		var arrange = function (e) {
			var handle = function () {
				var _this = this;
				var layer = _this.parentNode ? _this.parentNode.nextElementSibling : "";
				if (layer) {
					toggleClass(_this, isActiveClass);
					toggleClass(layer, isActiveClass);
					return callback && "function" === typeof callback && callback();
				}
				return;
			};
			if (!hasClass(e, isBindedClass)) {
				addListener(e, "click", handle);
				addClass(e, isBindedClass);
			}
		};
		if (btn) {
			var i,
			l;
			for (i = 0, l = btn.length; i < l; i += 1) {
				arrange(btn[i]);
			}
			i = l = null;
		}
	};

	/*!
	 * manageSearchInput
	 */
	root.manageSearchInput = function () {
		var text = document.getElementById("text") || "";
		var handle = function () {
			var _this = this;
			var logic = function () {
				_this.value = _this.value.replace(/\\/g, "").replace(/ +(?= )/g, " ").replace(/\/+(?=\/)/g, "/") || "";
			};
			debounce(logic, 200).call(root);
		};
		if (text) {
			text.focus();
			addListener(text, "input", handle);
		}
	};

	/*!
	 * LoadingSpinner
	 */
	root.LoadingSpinner = (function () {
		var docBody = document.body || "";
		var loadingSpinnerClass = "loading-spinner";
		var sp = getByClass(document, loadingSpinnerClass)[0] || "";
		var loadingSpinnerIsActiveClass = "loading-spinner--is-active";
		if (!sp) {
			sp = document.createElement("div");
			addClass(sp, loadingSpinnerClass);
			appendFragment(sp, docBody);
		}
		return {
			show: function () {
				return hasClass(docBody, loadingSpinnerIsActiveClass) || addClass(docBody, loadingSpinnerIsActiveClass);
			},
			hide: function (callback, timeout) {
				var delay = timeout || 500;
				var timer = setTimeout(function () {
						clearTimeout(timer);
						timer = null;
						removeClass(docBody, loadingSpinnerIsActiveClass);
						return callback && "function" === typeof callback && callback();
					}, delay);
			}
		};
	})();

	/*!
	 * modified Detect Whether a Font is Installed
	 * @param {String} fontName The name of the font to check
	 * @return {Boolean}
	 * @author Kirupa <sam@samclarke.com>
	 * @see {@link https://www.kirupa.com/html5/detect_whether_font_is_installed.htm}
	 * passes jshint
	 */
	root.doesFontExist = function (fontName) {
		var canvas = document.createElement("canvas");
		var context = canvas.getContext("2d");
		var text = "abcdefghijklmnopqrstuvwxyz0123456789";
		context.font = "72px monospace";
		var baselineSize = context.measureText(text).width;
		context.font = "72px '" + fontName + "', monospace";
		var newSize = context.measureText(text).width;
		canvas = null;
		if (newSize === baselineSize) {
			return false;
		} else {
			return true;
		}
	};

	/*!
	 * modified loadExt
	 * @see {@link https://gist.github.com/englishextra/ff9dc7ab002312568742861cb80865c9}
	 * passes jshint
	 */
	root.loadJsCss = function (files, callback, type) {
		var _this = this;
		_this.files = files;
		_this.js = [];
		_this.head = document.getElementsByTagName("head")[0] || "";
		_this.body = document.body || "";
		_this.ref = document.getElementsByTagName("script")[0] || "";
		_this.callback = callback || function () {};
		_this.type = type ? type.toLowerCase() : "";
		_this.loadStyle = function (file) {
			var link = document.createElement("link");
			link.rel = "stylesheet";
			link.type = "text/css";
			link.href = file;
			link.media = "only x";
			link.onload = function () {
				this.onload = null;
				this.media = "all";
			};
			link.setAttribute("property", "stylesheet");
			/* _this.head.appendChild(link); */
			(_this.body || _this.head).appendChild(link);
		};
		_this.loadScript = function (i) {
			var script = document.createElement("script");
			script.type = "text/javascript";
			script.async = true;
			script.src = _this.js[i];
			var loadNextScript = function () {
				if (++i < _this.js.length) {
					_this.loadScript(i);
				} else {
					_this.callback();
				}
			};
			script.onload = function () {
				loadNextScript();
			};
			_this.head.appendChild(script);
			/* if (_this.ref.parentNode) {
				_this.ref.parentNode[insertBefore](script, _this.ref);
			} else {
				(_this.body || _this.head).appendChild(script);
			} */
			(_this.body || _this.head).appendChild(script);
		};
		var i,
		l;
		for (i = 0, l = _this.files.length; i < l; i += 1) {
			if ((/\.js$|\.js\?/).test(_this.files[i]) || _this.type === "js") {
				_this.js.push(_this.files[i]);
			}
			if ((/\.css$|\.css\?|\/css\?/).test(_this.files[i]) || _this.type === "css") {
				_this.loadStyle(_this.files[i]);
			}
		}
		i = l = null;
		if (_this.js.length > 0) {
			_this.loadScript(0);
		} else {
			_this.callback();
		}
	};

	/*!
	 * loadDeferred
	 */
	root.loadDeferred = function (urlArray, callback) {
		var timer;
		var handle = function () {
			clearTimeout(timer);
			timer = null;
			var load;
			load = new loadJsCss(urlArray, callback);
		};
		var req;
		var raf = function () {
			cancelAnimationFrame(req);
			timer = setTimeout(handle, 0);
		};
		if (root.requestAnimationFrame) {
			req = requestAnimationFrame(raf);
		} else {
			addListener(root, "load", handle);
		}
	};

	/*!
	 * early utility classes
	 */
	root.earlyDeviceFormfactor = (function (selectors) {
		var orientation;
		var size;
		var addClasses = function (e) {
			var classesList = e.split(" ");
			if (selectors) {
				var i;
				for (i = 0; i < classesList.length; i += 1) {
					e = classesList[i];
					selectors.add(e);
				}
				i = null;
			}
		};
		var removeClasses = function (e) {
			var classesList = e.split(" ");
			if (selectors) {
				var i;
				for (i = 0; i < classesList.length; i += 1) {
					e = classesList[i];
					selectors.remove(e);
				}
				i = null;
			}
		};
		var orientationMq = {
			landscape: "all and (orientation:landscape)",
			portrait: "all and (orientation:portrait)"
		};
		var sizeMq = {
			small: "all and (max-width:768px)",
			medium: "all and (min-width:768px) and (max-width:991px)",
			large: "all and (min-width:992px)"
		};
		var matchMedia = "matchMedia";
		var matches = "matches";
		var toggleOrientationClasses = function (mqList, classText) {
			var handleMq = function (mqList) {
				if (mqList[matches]) {
					addClasses(classText);
					orientation = classText;
				} else {
					removeClasses(classText);
				}
			};
			handleMq(mqList);
			mqList.addListener(handleMq);
		};
		var toggleSizeClasses = function (mqList, classText) {
			var handleMq = function (mqList) {
				if (mqList[matches]) {
					addClasses(classText);
					size = classText;
				} else {
					removeClasses(classText);
				}
			};
			handleMq(mqList);
			mqList.addListener(handleMq);
		};
		var key;
		for (key in orientationMq) {
			if (orientationMq.hasOwnProperty(key)) {
				toggleOrientationClasses(root[matchMedia](orientationMq[key]), key);
			}
		}
		for (key in sizeMq) {
			if (sizeMq.hasOwnProperty(key)) {
				toggleSizeClasses(root[matchMedia](sizeMq[key]), key);
			}
		}
		key = null;
		return {
			orientation: orientation || "",
			size: size || ""
		};
	})(document.documentElement.classList || "");

	root.earlyDeviceType = (function (mobile, desktop, opera) {
		var selector = (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i).test(opera) ||
			(/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i).test(opera.substr(0, 4)) ?
			mobile :
			desktop;
		addClass(document.documentElement, selector);
		return selector;
	})("mobile", "desktop", navigator.userAgent || navigator.vendor || (root).opera);

	root.earlySvgSupport = (function (selector) {
		selector = document.implementation.hasFeature("http://www.w3.org/2000/svg", "1.1") ? selector : "no-" + selector;
		addClass(document.documentElement, selector);
		return selector;
	})("svg");

	root.earlySvgasimgSupport = (function (selector) {
		selector = document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1") ? selector : "no-" + selector;
		addClass(document.documentElement, selector);
		return selector;
	})("svgasimg");

	root.earlyHasTouch = (function (selector) {
		selector = "ontouchstart" in document.documentElement ? selector : "no-" + selector;
		addClass(document.documentElement, selector);
		return selector;
	})("touch");
})("undefined" !== typeof window ? window : this, document);

/*!
 * app logic
 */
(function (root, document) {
	"use strict";

	var docElem = document.documentElement || "";
	var docBody = document.body || "";

	if (supportsSvgSmilAnimation) {
		addClass(docElem, "svganimate");
	}

	var run = function () {

		var isActiveClass = "is-active";

		var isDropdownClass = "is-dropdown";

		var containerClass = "container";

		removeClass(docElem, "no-js");
		addClass(docElem, "js");

		var initialDocTitle = document.title || "";

		var userBrowser = " [" +
			(getHumanDate ? getHumanDate : "") +
			(earlyDeviceType ? " " + earlyDeviceType : "") +
			(earlyDeviceFormfactor.orientation ? " " + earlyDeviceFormfactor.orientation : "") +
			(earlyDeviceFormfactor.size ? " " + earlyDeviceFormfactor.size : "") +
			(earlySvgSupport ? " " + earlySvgSupport : "") +
			(earlySvgasimgSupport ? " " + earlySvgasimgSupport : "") +
			(earlyHasTouch ? " " + earlyHasTouch : "") +
			"]";

		if (document.title) {
			document.title = document.title + userBrowser;
		}

		manageExternalLinkAll();

		manageSearchInput();

		/*!
		 * init Masonry grid
		 * @see {@link https://stackoverflow.com/questions/15160010/jquery-masonry-collapsing-on-initial-page-load-works-fine-after-clicking-home}
		 * @see {@link https://gist.github.com/englishextra/5e423ff34f67982f017b}
		 * percentPosition: true works well with percent-width items,
		 * as items will not transition their position on resize.
		 * masonry.desandro.com/options.html
		 * use timed out layout property after initialising
		 * to level the horizontal gaps
		 */
		root.masonryInstance = null;
		root.packeryInstance = null;
		var initMasonry = function () {
			var gridClass = "masonry-grid";
			var gridItemClass = "masonry-grid-item";
			var gridItemSelector = ".masonry-grid-item";
			var gridSizerSelector = ".masonry-grid-sizer";
			var grid = getByClass(document, gridClass)[0] || "";
			var gridItem = getByClass(document, gridItemClass)[0] || "";
			var initScript = function () {
				if (root.Masonry) {
					if (root.masonryInstance) {
						root.masonryInstance.destroy();
					}
					root.masonryInstance = new Masonry(grid, {
							itemSelector: gridItemSelector,
							columnWidth: gridSizerSelector,
							gutter: 0,
							percentPosition: true
						});
				} else {
					if (root.Packery) {
						if (root.packeryInstance) {
							root.packeryInstance.destroy();
						}
						root.packeryInstance = new Packery(grid, {
								itemSelector: gridItemSelector,
								columnWidth: gridSizerSelector,
								gutter: 0,
								percentPosition: true
							});
					}
				}
				var timer = setTimeout(function () {
					clearTimeout(timer);
					timer = null;
					if (root.masonryInstance) {
						root.masonryInstance.layout();
					} else {
						if (root.packeryInstance) {
							root.packeryInstance.layout();
						}
					}
				}, 500);
			};
			if (grid && gridItem) {
				/* var jsUrl = "./cdn/masonry/4.1.1/js/masonry.pkgd.fixed.min.js"; */
				/* var jsUrl = "./cdn/packery/2.1.1/js/packery.pkgd.fixed.js"; */
				initScript();
			}
		};

		var hideOtherDropdownAll = function (_self) {
			var _this = _self || this;
			var list = getByClass(document, isDropdownClass) || "";
			var removeActiveClass = function (e) {
				if (_this !== e) {
					removeClass(e, isActiveClass);
				}
			};
			if (list) {
				var i,
				l;
				for (i = 0, l = list.length; i < l; i += 1) {
					removeActiveClass(list[i]);
				}
				i = l = null;
			}
		};
		var manageDropdownAll = function () {
			var container = document.getElementById(containerClass) || "";
			if (container) {
				addListener(container, "click", hideOtherDropdownAll);
			}
		};
		manageDropdownAll();

		var manageContentsSelect = function () {
			var contentsSelect = document.getElementById("contents-select") || "";
			var rerenderContentsSelect = function () {
				var contentsSelect = document.getElementById("contents-select") || "";
				var holdercontentsSelect = getByClass(document, "holder-contents-select")[0] || "";
				var contentsListClass = "contents-list";
				var contentsListButtonClass = "contents-list-button";
				var rerendercontentsList = function () {
					var handlecontentsListItem = function (listObj, hashString) {
						if (hashString) {
							var targetObj = hashString ? (isValidId(hashString, true) ? document.getElementById(hashString.replace(/^#/,"")) || "" : "") : "";
							if (targetObj) {
								scroll2Top(findPos(targetObj).top, 10000);
							} else {
								root.location.hash = hashString;
							}
						}
						removeClass(listObj, isActiveClass);
					};
					var contentsList = document.createElement("ul");
					var contentsListItems = contentsSelect ? contentsSelect.getElementsByTagName("option") || "" : "";
					var contentsListBtnDefaultText = "";
					var fragment = document.createDocumentFragment();
					var generatecontentsListItems = function (_this, i) {
						if (0 === i) {
							contentsListBtnDefaultText = _this.firstChild.textContent;
						}
						var contentsListItem = document.createElement("li");
						var contentsListItemText = _this.firstChild.textContent || "";
						var contentsListItemValue = _this.value;
						var contentsListItemTextTruncated = truncateString("" + contentsListItemText, 28);
						contentsListItem.appendChild(document.createTextNode(contentsListItemTextTruncated));
						contentsListItem.title = contentsListItemText;
						addListener(contentsListItem, "click", handlecontentsListItem.bind(null, contentsList, contentsListItemValue));
						fragment.appendChild(contentsListItem);
						fragment.appendChild(document.createTextNode("\n"));
					};
					var i,
					l;
					for (i = 0, l = contentsListItems.length; i < l; i += 1) {
						generatecontentsListItems(contentsListItems[i], i);
					}
					i = l = null;
					appendFragment(fragment, contentsList);
					addClass(contentsList, contentsListClass);
					addClass(contentsList, isDropdownClass);
					holdercontentsSelect.replaceChild(contentsList, contentsSelect.parentNode.parentNode);
					var contentsListButton = document.createElement("button");
					addClass(contentsListButton, contentsListButtonClass);
					contentsListButton.appendChild(document.createTextNode(contentsListBtnDefaultText));
					contentsList.parentNode.insertBefore(contentsListButton, contentsList);
					var insertChevronDownSmallSvg = function (targetObj) {
						var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
						var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
						svg.setAttribute("class", "ui-icon");
						use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#ui-icon-ChevronDownSmall");
						svg.appendChild(use);
						targetObj.appendChild(svg);
					};
					insertChevronDownSmallSvg(contentsListButton);
					var handlecontentsListBtn = function (ev) {
						ev.stopPropagation();
						ev.preventDefault();
						toggleClass(contentsList, isActiveClass);
						hideOtherDropdownAll(contentsList);
					};
					addListener(contentsListButton, "click", handlecontentsListBtn);
				};
				if (holdercontentsSelect && contentsSelect) {
					rerendercontentsList();
				}
			};
			var jsonUrl = "./libs/englishextra-app/json/contents.json";
			var processJsonResponse = function (responseText) {
				var jsonObject;
				try {
					jsonObject = safelyParseJson(responseText);
					if (!jsonObject[0].label) {
						throw new Error("incomplete JSON data: no label");
					} else {
						if (!jsonObject[0].link) {
							throw new Error("incomplete JSON data: no link");
						}
					}
				} catch (err) {
					console.log("cannot init processJsonResponse " + err);
					return;
				}
				var df = document.createDocumentFragment();
				var generateContentsOptions = function (e) {
					var label = getObjectKeyValue(e, "label") || "";
					var link = getObjectKeyValue(e, "link") || "";
					if (label && link) {
						var contentsOption = document.createElement("option");
						contentsOption.value = link;
						contentsOption.title = "" + label;
						contentsOption.appendChild(document.createTextNode(truncateString("" + label, 33)));
						df.appendChild(contentsOption);
					}
				};
				var i,
				l;
				for (i = 0, l = jsonObject.length; i < l; i += 1) {
					generateContentsOptions(jsonObject[i]);
				}
				i = l = null;
				contentsSelect.appendChild(df);
				rerenderContentsSelect();
			};
			if (contentsSelect) {
				ajaxGet(jsonUrl, {
					overrideMimeType: "application/json;charset=utf-8",
					success: function (responseText) {
						processJsonResponse(responseText);
					},
					failure: function (status) {
						console.log(status);
					}
				});
			}
		};

		var manageChaptersSelect = function () {
			var chaptersSelect = document.getElementById("chapters-select") || "";
			var holderChaptersSelect = getByClass(document, "holder-chapters-select")[0] || "";
			var chaptersListClass = "chapters-list";
			var chaptersListButtonClass = "chapters-list-button";
			var rerenderChaptersList = function () {
				var handleChaptersListItem = function (listObj, hashString) {
					if (hashString) {
						var targetObj = hashString ? (isValidId(hashString, true) ? document.getElementById(hashString.replace(/^#/,"")) || "" : "") : "";
						if (targetObj) {
							scroll2Top(findPos(targetObj).top, 10000);
						} else {
							root.location.hash = hashString;
						}
					}
					removeClass(listObj, isActiveClass);
				};
				var chaptersList = document.createElement("ul");
				var chaptersListItems = chaptersSelect ? chaptersSelect.getElementsByTagName("option") || "" : "";
				var chaptersListBtnDefaultText = "";
				var fragment = document.createDocumentFragment();
				var generateChaptersListItems = function (_this, i) {
					if (0 === i) {
						chaptersListBtnDefaultText = _this.firstChild.textContent;
					}
					var chaptersListItem = document.createElement("li");
					var chaptersListItemText = _this.firstChild.textContent || "";
					var chaptersListItemValue = _this.value;
					var chaptersListItemTextTruncated = truncateString("" + chaptersListItemText, 28);
					chaptersListItem.appendChild(document.createTextNode(chaptersListItemTextTruncated));
					chaptersListItem.title = chaptersListItemText;
					addListener(chaptersListItem, "click", handleChaptersListItem.bind(null, chaptersList, chaptersListItemValue));
					fragment.appendChild(chaptersListItem);
					fragment.appendChild(document.createTextNode("\n"));
				};
				var i,
				l;
				for (i = 0, l = chaptersListItems.length; i < l; i += 1) {
					generateChaptersListItems(chaptersListItems[i], i);
				}
				i = l = null;
				appendFragment(fragment, chaptersList);
				addClass(chaptersList, chaptersListClass);
				addClass(chaptersList, isDropdownClass);
				holderChaptersSelect.replaceChild(chaptersList, chaptersSelect.parentNode.parentNode);
				var chaptersListButton = document.createElement("button");
				addClass(chaptersListButton, chaptersListButtonClass);
				chaptersListButton.appendChild(document.createTextNode(chaptersListBtnDefaultText));
				chaptersList.parentNode.insertBefore(chaptersListButton, chaptersList);
				var insertChevronDownSmallSvg = function (targetObj) {
					var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
					var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
					svg.setAttribute("class", "ui-icon");
					use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#ui-icon-ChevronDownSmall");
					svg.appendChild(use);
					targetObj.appendChild(svg);
				};
				insertChevronDownSmallSvg(chaptersListButton);
				var handleChaptersListBtn = function (ev) {
					ev.stopPropagation();
					ev.preventDefault();
					toggleClass(chaptersList, isActiveClass);
					hideOtherDropdownAll(chaptersList);
				};
				addListener(chaptersListButton, "click", handleChaptersListBtn);
			};
			if (holderChaptersSelect && chaptersSelect) {
				rerenderChaptersList();
			}
		};
		manageChaptersSelect();

		/*!
		 * init nav-menu
		 */
		var manageNavMenu = function () {
			var container = document.getElementById("container") || "";
			var page = document.getElementById("page") || "";
			var btn = getByClass(document, "btn-nav-menu")[0] || "";
			var panel = getByClass(document, "panel-nav-menu")[0] || "";
			var panelItems = panel ? panel.getElementsByTagName("a") || "" : "";
			var holderPanelMenuMore = getByClass(document, "holder-panel-menu-more")[0] || "";
			var locHref = root.location.href || "";
			var removeAllActiveClass = function () {
				removeClass(page, isActiveClass);
				removeClass(panel, isActiveClass);
				removeClass(btn, isActiveClass);
			};
			var removeHolderActiveClass = function () {
				if (holderPanelMenuMore && hasClass(holderPanelMenuMore, isActiveClass)) {
					removeClass(holderPanelMenuMore, isActiveClass);
				}
			};
			var addContainerHandler = function () {
				var handleContainerLeft = function () {
					/* console.log("swipeleft"); */
					removeHolderActiveClass();
					if (hasClass(panel, isActiveClass)) {
						removeAllActiveClass();
					}
				};
				var handleContainerRight = function () {
					/* console.log("swiperight"); */
					removeHolderActiveClass();
					var addAllActiveClass = function () {
						addClass(page, isActiveClass);
						addClass(panel, isActiveClass);
						addClass(btn, isActiveClass);
					};
					if (!hasClass(panel, isActiveClass)) {
						addAllActiveClass();
					}
				};
				addListener(container, "click", handleContainerLeft);
				if (root.tocca) {
					if ("undefined" !== typeof earlyHasTouch && "touch" === earlyHasTouch) {
						addListener(container, "swipeleft", handleContainerLeft);
						addListener(container, "swiperight", handleContainerRight);
					}
				}
			};
			var addBtnHandler = function () {
				var toggleAllActiveClass = function () {
					toggleClass(page, isActiveClass);
					toggleClass(panel, isActiveClass);
					toggleClass(btn, isActiveClass);
				};
				var handleBtn = function (ev) {
					ev.stopPropagation();
					ev.preventDefault();
					removeHolderActiveClass();
					toggleAllActiveClass();
				};
				addListener(btn, "click", handleBtn);
			};
			var addItemHandlerAll = function () {
				var addItemHandler = function (e) {
					var addActiveClass = function (e) {
						addClass(e, isActiveClass);
					};
					var removeHolderAndAllActiveClass = function () {
						removeHolderActiveClass();
						removeAllActiveClass();
					};
					var removeActiveClass = function (e) {
						removeClass(e, isActiveClass);
					};
					var handleItem = function () {
						if (hasClass(panel, isActiveClass)) {
							removeHolderAndAllActiveClass();
						}
						var i,
						l;
						for (i = 0, l = panelItems.length; i < l; i += 1) {
							removeActiveClass(panelItems[i]);
						}
						i = l = null;
						addActiveClass(e);
					};
					addListener(e, "click", handleItem);
					if (locHref === e.href) {
						addActiveClass(e);
					} else {
						removeActiveClass(e);
					}
				};
				var i,
				l;
				for (i = 0, l = panelItems.length; i < l; i += 1) {
					addItemHandler(panelItems[i]);
				}
				i = l = null;
			};
			if (page &&
				container &&
				btn &&
				panel &&
				panelItems) {
				/*!
				 * close nav on outside click
				 */
				addContainerHandler();
				/*!
				 * open or close nav
				 */
				addBtnHandler();
				/*!
				 * close nav, scroll to top, highlight active nav item
				 */
				addItemHandlerAll();
			}
		};
		manageNavMenu();
		/*!
		 * highlight current nav-menu item
		 */
		var highlightNavMenuItem = function () {
			var panel = getByClass(document, "panel-nav-menu")[0] || "";
			var panelItems = panel ? panel.getElementsByTagName("a") || "" : "";
			var locHref = root.location.href || "";
			var toggleActiveClass = function (e) {
				if (locHref === e.href) {
					addClass(e, isActiveClass);
				} else {
					removeClass(e, isActiveClass);
				}
			};
			if (panel && panelItems && locHref) {
				var i,
				l;
				for (i = 0, l = panelItems.length; i < l; i += 1) {
					toggleActiveClass(panelItems[i]);
				}
				i = l = null;
			}
		};
		root.addEventListener("hashchange", highlightNavMenuItem);

		var manageMenuMore = function () {
			var container = document.getElementById("container") || "";
			var page = document.getElementById("page") || "";
			var holder = getByClass(document, "holder-panel-menu-more")[0] || "";
			var btn = getByClass(document, "btn-menu-more")[0] || "";
			var panel = getByClass(document, "panel-menu-more")[0] || "";
			var panelItems = panel ? panel.getElementsByTagName("li") || "" : "";
			var panelNavMenu = getByClass(document, "panel-nav-menu")[0] || "";
			var handleItem = function () {
				removeClass(page, isActiveClass);
				removeClass(holder, isActiveClass);
				if (panelNavMenu && hasClass(panelNavMenu, isActiveClass)) {
					removeClass(panelNavMenu, isActiveClass);
				}
			};
			var addContainerHandler = function () {
				addListener(container, "click", handleItem);
			};
			var addBtnHandler = function () {
				var handlebtn = function (ev) {
					ev.stopPropagation();
					ev.preventDefault();
					toggleClass(holder, isActiveClass);
				};
				addListener(btn, "click", handlebtn);
			};
			var addItemHandlerAll = function () {
				var addItemHandler = function (e) {
					addListener(e, "click", handleItem);
				};
				var i,
				l;
				for (i = 0, l = panelItems.length; i < l; i += 1) {
					addItemHandler(panelItems[i]);
				}
				i = l = null;
			};
			if (page &&
				container &&
				holder &&
				btn &&
				panel &&
				panelItems) {
				/*!
				 * hide menu more on outside click
				 */
				addContainerHandler();
				/*!
				 * show or hide menu more
				 */
				addBtnHandler();
				/*!
				 * hide menu more on item clicked
				 */
				addItemHandlerAll();
			}
		};
		manageMenuMore();

		root.kamilInstance = null;
		var manageKamil = function () {
			var searchForm = getByClass(document, "search-form")[0] || "";
			var textInputSelector = "#text";
			var textInput = document.getElementById("text") || "";
			var jsonUrl = "./libs/englishextra-app/json/contents.json";
			var processJsonResponse = function (responseText) {
				var ac;
				try {
					var jsonObject = safelyParseJson(responseText);
					if (!jsonObject[0].hasOwnProperty("label")) {
						throw new Error("incomplete JSON data: no label");
					}
					ac = new Kamil(textInputSelector, {
							source: jsonObject,
							property: "label",
							minChars: 2
						});
				} catch (err) {
					console.log("cannot init generateMenu " + err);
					return;
				}
				/*!
				 * show suggestions
				 */
				ac.renderMenu = function (ul, stance) {
					var items = stance || "";
					var itemsLength = items.length;
					var _this = this;
					/*!
					 * limit output
					 */
					var limitKamilOutput = function (e, i) {
						if (i < 10) {
							_this._renderItemData(ul, e, i);
						}
					};
					if (items) {
						var i;
						for (i = 0; i < itemsLength; i += 1) {
							limitKamilOutput(items[i], i);
						}
						i = null;
					}
					/*!
					 * truncate text
					 */
					var lis = ul ? ul.getElementsByTagName("li") || "" : "";
					var truncateKamilText = function (e) {
						var truncText = e.firstChild.textContent || "";
						var truncTextObj = document.createTextNode(truncateString(truncText, 24));
						e.replaceChild(truncTextObj, e.firstChild);
						/* e.title = "" + truncText; */
					};
					if (lis) {
						var j,
						m;
						for (j = 0, m = lis.length; j < m; j += 1) {
							truncateKamilText(lis[j]);
						}
						j = m = null;
					}
				};
				/*!
				 * unless you specify property option in new Kamil
				 * use kamil built-in word label as search key in JSON file
				 * [{"link":"/","label":"some text to match"},
				 * {"link":"/pages/contents.html","label":"some text to match"}]
				 */
				ac.on("kamilselect", function (e) {
					var kamilItemLink = e.item.link || "";
					var handleKamilItem = function () {
						e.inputElement.value = "";
						root.location.href = kamilItemLink;
					};
					if (kamilItemLink) {
						/*!
						 * nwjs wont like setImmediate here
						 */
						/* setImmediate(handleKamilItem); */
						handleKamilItem();
					}
				});
			};
			var initScript = function () {
				if (!root.kamilInstance) {
					root.kamilInstance = true;
					ajaxGet(jsonUrl, {
						overrideMimeType: "application/json;charset=utf-8",
						success: function (responseText) {
							processJsonResponse(responseText);
						},
						failure: function (status) {
							console.log(status);
						}
					});
				}
			};
			if (root.Kamil && searchForm && textInput) {
				initScript();
			}
		};
		manageKamil();

		var manageTotopBtn = function () {
			var btnClass = "btn-totop";
			var btn = getByClass(document, btnClass)[0] || "";
			var insertUpSvg = function (e) {
				var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
				var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
				svg.setAttribute("class", "ui-icon");
				use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#ui-icon-Up");
				svg.appendChild(use);
				e.appendChild(svg);
			};
			if (!btn) {
				btn = document.createElement("button");
				addClass(btn, btnClass);
				btn.title = "Наверх";
				insertUpSvg(btn);
				docBody.appendChild(btn);
			}
			var handleBtn = function (ev) {
				ev.stopPropagation();
				ev.preventDefault();
				scroll2Top(0, 20000);
			};
			var handleRoot = function (_this) {
				var logic = function () {
					var scrollPosition = _this.pageYOffset || docElem.scrollTop || docBody.scrollTop || "";
					var windowHeight = _this.innerHeight || docElem.clientHeight || docBody.clientHeight || "";
					if (scrollPosition && windowHeight && btn) {
						if (scrollPosition > windowHeight) {
							addClass(btn, isActiveClass);
						} else {
							removeClass(btn, isActiveClass);
						}
					}
				};
				throttle(logic, 100).call(root);
			};
			if (docBody) {
				addListener(btn, "click", handleBtn);
				addListener(root, "scroll", handleRoot, {passive: true});
			}
		};
		manageTotopBtn();

		var initRoutie = function () {
			var appContentId = "app-content";
			var appContent = document.getElementById(appContentId) || "";
			var loadPage = function (id, url, callback) {
				if (id && url) {
					LoadingSpinner.show();
					insertExternalHtml(id, url, callback, null, true);
				}
			};
			var onEmbedded = function (titleString) {
				titleString = titleString || "";
				/*!
				 * hide loading spinner before scrolling
				 */
				document.title = (titleString ? titleString + " - " : "" ) + (initialDocTitle ? initialDocTitle : "");
				manageContentsSelect();
				manageExternalLinkAll();
				manageChaptersSelect();
				manageExpandingLayerAll();
				initMasonry();
				var timer = setTimeout(function () {
						clearTimeout(timer);
						timer = null;
						manageDataSrcImgAll();
					}, 100);
				LoadingSpinner.hide(scroll2Top.bind(null, 0, 20000));
			};
			var onNotfound = function (containerClass) {
				var container = document.getElementById(containerClass) || "";
				var msgText = document.createRange().createContextualFragment('<div class="content-wrapper"><div class="grid-narrow grid-pad"><div class="col col-1-1"><div class="content"><p>Нет такой страницы. <a href="#/contents">Исправить?</a></p></div></div></div></div>');
				if (container) {
					LoadingSpinner.show();
					removeChildren(container);
					appendFragment(msgText, container);
					onEmbedded("Нет такой страницы");
				}
			};
			/*!
			 * init routie
			 * "#" => ""
			 * "#/" => "/"
			 * "#/home" => "/home"
			 */
			if (appContent) {
				routie({
					"": function () {
						loadPage(appContentId, "./pages/contents.html", function () {
							onEmbedded("Содержание");
						});
					},
					"/contents": function () {
						loadPage(appContentId, "./pages/contents.html", function () {
							onEmbedded("Содержание");
						});
					},
					"/aids_most_commonly_used_idioms": function () {
						loadPage(appContentId, "./pages/aids/aids_most_commonly_used_idioms.html", function () {
							onEmbedded("Пособия - Most Commonly Used Idioms");
						});
					},
					"/aids_topics": function () {
						loadPage(appContentId, "./pages/aids/aids_topics.html", function () {
							onEmbedded("Пособия - Топики на английском");
						});
					},
					"/articles_reading_rules_utf": function () {
						loadPage(appContentId, "./pages/articles/articles_reading_rules_utf.html", function () {
							onEmbedded("Статьи - Правила чтения");
						});
					},
					"/tests_advanced_grammar_in_use_level_test": function () {
						loadPage(appContentId, "./pages/tests/tests_advanced_grammar_in_use_level_test.html", function () {
							onEmbedded("Тесты - Advanced Grammar in Use Level Test");
						});
					},
					"/tests_english_grammar_in_use_level_test": function () {
						loadPage(appContentId, "./pages/tests/tests_english_grammar_in_use_level_test.html", function () {
							onEmbedded("Тесты - English Grammar in Use Level Test");
						});
					},
					"/tests_essential_grammar_in_use_level_test": function () {
						loadPage(appContentId, "./pages/tests/tests_essential_grammar_in_use_level_test.html", function () {
							onEmbedded("Тесты - Essential Grammar in Use Level Test");
						});
					},
					"/tests_ege_english_test_sample": function () {
						loadPage(appContentId, "./pages/tests/tests_ege_english_test_sample.html", function () {
							onEmbedded("Тесты - Демо-вариант ЕГЭ-11 АЯ (ПЧ)");
						});
					},
					"/tests_ege_english_test_sample_speaking": function () {
						loadPage(appContentId, "./pages/tests/tests_ege_english_test_sample_speaking.html", function () {
							onEmbedded("Тесты - Демо-вариант ЕГЭ-11 АЯ (УЧ)");
						});
					},
					"/tests_ege_essay_sample": function () {
						loadPage(appContentId, "./pages/tests/tests_ege_essay_sample.html", function () {
							onEmbedded("Тесты - ЕГЭ: Задание 40");
						});
					},
					"/tests_gia_ege_letter_sample": function () {
						loadPage(appContentId, "./pages/tests/tests_gia_ege_letter_sample.html", function () {
							onEmbedded("Тесты - ГИА / ЕГЭ: Задания 33, 39, 40");
						});
					},
					"/tests_gia_english_test_sample": function () {
						loadPage(appContentId, "./pages/tests/tests_gia_english_test_sample.html", function () {
							onEmbedded("Тесты - Демо-вариант ГИА-9 (ОГЭ) АЯ (ПЧ)");
						});
					},
					"/tests_gia_english_test_sample_speaking": function () {
						loadPage(appContentId, "./pages/tests/tests_gia_english_test_sample_speaking.html", function () {
							onEmbedded("Тесты - Демо-вариант ГИА-9 (ОГЭ) АЯ (УЧ)");
						});
					},
					"/tests_languagelink_online_test": function () {
						loadPage(appContentId, "./pages/tests/tests_languagelink_online_test.html", function () {
							onEmbedded("Тесты - Уровневый тест");
						});
					},
					"/tests_common_mistakes_test_advanced": function () {
						loadPage(appContentId, "./pages/tests/tests_common_mistakes_test_advanced.html", function () {
							onEmbedded("Тесты - Common Mistakes Test Advanced");
						});
					},
					"/tests_english_allrussian_olympiad_regional_stage_2013": function () {
						loadPage(appContentId, "./pages/tests/tests_english_allrussian_olympiad_regional_stage_2013.html", function () {
							onEmbedded("Тесты - XIV Олимпиада по английскому");
						});
					},
					"/tests_grammar_tests_with_answers": function () {
						loadPage(appContentId, "./pages/tests/tests_grammar_tests_with_answers.html", function () {
							onEmbedded("Тесты - Тесты по грамматике");
						});
					},
					"/grammar_all_whole_entire": function () {
						loadPage(appContentId, "./pages/grammar/grammar_all_whole_entire.html", function () {
							onEmbedded("Грамматика - All / the whole / the entire");
						});
					},
					"/grammar_alone_by_myself_and_on_my_own": function () {
						loadPage(appContentId, "./pages/grammar/grammar_alone_by_myself_and_on_my_own.html", function () {
							onEmbedded("Грамматика - Alone / by myself / on my own");
						});
					},
					"/grammar_attributes_order": function () {
						loadPage(appContentId, "./pages/grammar/grammar_attributes_order.html", function () {
							onEmbedded("Грамматика - Порядок определений");
						});
					},
					"/grammar_can_could_be_able_to": function () {
						loadPage(appContentId, "./pages/grammar/grammar_can_could_be_able_to.html", function () {
							onEmbedded("Грамматика - Can / could / be able to");
						});
					},
					"/grammar_capital_letters": function () {
						loadPage(appContentId, "./pages/grammar/grammar_capital_letters.html", function () {
							onEmbedded("Грамматика - С большой или с маленькой");
						});
					},
					"/grammar_comma_before_who_which_that": function () {
						loadPage(appContentId, "./pages/grammar/grammar_comma_before_who_which_that.html", function () {
							onEmbedded("Грамматика - Who / which / that и запятые");
						});
					},
					"/grammar_common_and_proper_nouns": function () {
						loadPage(appContentId, "./pages/grammar/grammar_common_and_proper_nouns.html", function () {
							onEmbedded("Грамматика - Нарицательное / собственное");
						});
					},
					"/grammar_conditionals": function () {
						loadPage(appContentId, "./pages/grammar/grammar_conditionals.html", function () {
							onEmbedded("Грамматика - Согласование времен");
						});
					},
					"/grammar_degrees_of_comparison": function () {
						loadPage(appContentId, "./pages/grammar/grammar_degrees_of_comparison.html", function () {
							onEmbedded("Грамматика - Степени сравнения");
						});
					},
					"/grammar_ex_former": function () {
						loadPage(appContentId, "./pages/grammar/grammar_ex_former.html", function () {
							onEmbedded("Грамматика - «Ex-» и «former», или Осторожно: морпехи");
						});
					},
					"/grammar_foreign_words": function () {
						loadPage(appContentId, "./pages/grammar/grammar_foreign_words.html", function () {
							onEmbedded("Грамматика - Заимствованные слова");
						});
					},
					"/grammar_glossary_of_grammatical_terms": function () {
						loadPage(appContentId, "./pages/grammar/grammar_glossary_of_grammatical_terms.html", function () {
							onEmbedded("Грамматика - Glossary of Grammatical Terms");
						});
					},
					"/grammar_grammar_girl_s_quick_and_dirty_grammar_at_a_glance": function () {
						loadPage(appContentId, "./pages/grammar/grammar_grammar_girl_s_quick_and_dirty_grammar_at_a_glance.html", function () {
							onEmbedded("Грамматика - Quick and Dirty Grammar");
						});
					},
					"/grammar_in_at_on": function () {
						loadPage(appContentId, "./pages/grammar/grammar_in_at_on.html", function () {
							onEmbedded("Грамматика - In / at / on");
						});
					},
					"/grammar_in_hospital_at_work": function () {
						loadPage(appContentId, "./pages/grammar/grammar_in_hospital_at_work.html", function () {
							onEmbedded("Грамматика - In hospital / at work etc.");
						});
					},
					"/grammar_irregular_verbs": function () {
						loadPage(appContentId, "./pages/grammar/grammar_irregular_verbs.html", function () {
							onEmbedded("Грамматика - Неправильные глаголы (таблица)");
						});
					},
					"/grammar_may_might_be_allowed_to": function () {
						loadPage(appContentId, "./pages/grammar/grammar_may_might_be_allowed_to.html", function () {
							onEmbedded("Грамматика - May / might / be allowed to");
						});
					},
					"/grammar_modal_verbs": function () {
						loadPage(appContentId, "./pages/grammar/grammar_modal_verbs.html", function () {
							onEmbedded("Грамматика - Модальные глаголы");
						});
					},
					"/grammar_much_many_little_few": function () {
						loadPage(appContentId, "./pages/grammar/grammar_much_many_little_few.html", function () {
							onEmbedded("Грамматика - Much / many / little / few");
						});
					},
					"/grammar_or_nor_neither": function () {
						loadPage(appContentId, "./pages/grammar/grammar_or_nor_neither.html", function () {
							onEmbedded("Грамматика - Or / nor / neither");
						});
					},
					"/grammar_phrasal_verbs": function () {
						loadPage(appContentId, "./pages/grammar/grammar_phrasal_verbs.html", function () {
							onEmbedded("Грамматика - Фразовые глаголы");
						});
					},
					"/grammar_reported_speech": function () {
						loadPage(appContentId, "./pages/grammar/grammar_reported_speech.html", function () {
							onEmbedded("Грамматика - Косвенная речь");
						});
					},
					"/grammar_saying_numbers": function () {
						loadPage(appContentId, "./pages/grammar/grammar_saying_numbers.html", function () {
							onEmbedded("Грамматика - Числа по-английски");
						});
					},
					"/grammar_stative_and_action_verbs": function () {
						loadPage(appContentId, "./pages/grammar/grammar_stative_and_action_verbs.html", function () {
							onEmbedded("Грамматика - Неконтиниусные глаголы");
						});
					},
					"/grammar_the_listing_comma": function () {
						loadPage(appContentId, "./pages/grammar/grammar_the_listing_comma.html", function () {
							onEmbedded("Грамматика - Серийная запятая");
						});
					},
					"/grammar_too_enough_so_such": function () {
						loadPage(appContentId, "./pages/grammar/grammar_too_enough_so_such.html", function () {
							onEmbedded("Грамматика - Too / enough и so / such");
						});
					},
					"/grammar_to_me_for_me": function () {
						loadPage(appContentId, "./pages/grammar/grammar_to_me_for_me.html", function () {
							onEmbedded("Грамматика - To me / for me, или Надуманная проблема");
						});
					},
					"/grammar_translating_participles": function () {
						loadPage(appContentId, "./pages/grammar/grammar_translating_participles.html", function () {
							onEmbedded("Грамматика - Перевод причастий и деепричастий");
						});
					},
					"/grammar_usage_of_articles_a_the": function () {
						loadPage(appContentId, "./pages/grammar/grammar_usage_of_articles_a_the.html", function () {
							onEmbedded("Грамматика - Артикли a / an и the");
						});
					},
					"/grammar_usage_of_hyphens": function () {
						loadPage(appContentId, "./pages/grammar/grammar_usage_of_hyphens.html", function () {
							onEmbedded("Грамматика - Расстановка дефисов");
						});
					},
					"/grammar_usage_of_tenses": function () {
						loadPage(appContentId, "./pages/grammar/grammar_usage_of_tenses.html", function () {
							onEmbedded("Грамматика - Употребление времен");
						});
					},
					"/grammar_when_must_means_probably": function () {
						loadPage(appContentId, "./pages/grammar/grammar_when_must_means_probably.html", function () {
							onEmbedded("Грамматика - Когда must = «должно быть»");
						});
					},
					"/grammar_word_order": function () {
						loadPage(appContentId, "./pages/grammar/grammar_word_order.html", function () {
							onEmbedded("Грамматика - Порядок слов в предложении");
						});
					},
					"/reading_russia_ukraine_war_conflict_vocabulary": function () {
						loadPage(appContentId, "./pages/reading/reading_russia_ukraine_war_conflict_vocabulary.html", function () {
							onEmbedded("Чтение - Russia-Ukraine War Conflict");
						});
					},
					"/reading_the_man_with_the_scar": function () {
						loadPage(appContentId, "./pages/reading/reading_the_man_with_the_scar.html", function () {
							onEmbedded("Чтение - The Man with the Scar");
						});
					},
					"/transcripts_linguaspectrum_essential_british_english_expressions": function () {
						loadPage(appContentId, "./pages/transcripts/transcripts_linguaspectrum_essential_british_english_expressions.html", function () {
							onEmbedded("Транскрипты - Essential British English Expressions");
						});
					},
					"/transcripts_linguaspectrum_spell": function () {
						loadPage(appContentId, "./pages/transcripts/transcripts_linguaspectrum_spell.html", function () {
							onEmbedded("Транскрипты - 44 Most Often Misspelled Words");
						});
					},
					"/transcripts_video_vocab_transcripts": function () {
						loadPage(appContentId, "./pages/transcripts/transcripts_video_vocab_transcripts.html", function () {
							onEmbedded("Транскрипты - English Vocabulary for Business");
						});
					},
					"/webdev_about": function () {
						loadPage(appContentId, "./pages/webdev/webdev_about.html", function () {
							onEmbedded("О приложении «Английский без регистрации»");
						});
					},
					"/*": function () {
						onNotfound(appContentId);
					}
				});
			}
		};
		initRoutie();

		var revealPage = function () {
			var page = document.getElementById("page") || "";
			var holder = getByClass(document, "holder-site-logo")[0] || "";
			var animatedClass = "animated";
			var fadeOutClass = "fadeOut";
			if (page) {
				setVisible(page);
			}
			if (holder) {
				var timers2 = setTimeout(function () {
						clearTimeout(timers2);
						timers2 = null;
						holder.classList.add(animatedClass, fadeOutClass);
						var timers3 = setTimeout(function () {
								clearTimeout(timers3);
								timers3 = null;
								setDisplayNone(holder);
								if (docBody) {
									docBody.style.overflowY = "auto";
								}
							}, 500);
					}, 1500);
			}
		};
		revealPage();
	};

	var onFontReady = function (bodyFontFamily, scripts, useCheck) {
		var _useCheck = useCheck || "";
		var slot;
		var init = function () {
			clearInterval(slot);
			slot = null;
			if (!supportsSvgSmilAnimation && "undefined" !== typeof progressBar) {
				progressBar.increase(20);
			}
			var load;
			load = new loadJsCss(scripts, run);
		};
		var check = function () {
			if (doesFontExist(bodyFontFamily)) {
				init();
			}
		};
		if (_useCheck && supportsCanvas) {
			slot = setInterval(check, 100);
		} else {
			slot = null;
			init();
		}
	};

	var scripts = [];

	if (needsPolyfills) {
		scripts.push("./cdn/polyfills/js/polyfills.fixed.min.js");
	}

	scripts.push("./libs/englishextra-app/js/vendors.min.js");

	var bodyFontFamily = "Source Sans Pro";

	var urlArray = ["./libs/englishextra-app/css/bundle.min.css"];

	loadDeferred(urlArray, onFontReady.bind(null, bodyFontFamily, scripts, false));
})("undefined" !== typeof window ? window : this, document);
